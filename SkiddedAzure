__=

	"Discord: Actyrn#7104, Server: .gg/wDngb2mv4H"

-- Credits to Elegant & Fulcrum.#2610, the original script coders!!

-- DO NOT EDIT BELOW IF YOU DON'T KNOW WHAT YOU'RE DOING!!

repeat wait() until game:IsLoaded()

loadstring(game:HttpGet("https://pastebin.com/raw/JFzC7iXS"))()

-- Variables

local NotifLib = loadstring(game:HttpGet("https://pastebin.com/raw/KRep3e1w"))()

local CamBindEnabled = false
local TargBindEnabled = false

local Plr = game.Players.LocalPlayer

local RunService = game.RunService
local UserInputService = game.UserInputService

local Gmt = getrawmetatable(game)
local Old = Gmt.__namecall
local NewIndex

local StrafeSpeed = 0

local TargCursorDot = Drawing.new("Circle")
local TargFovCircle = Drawing.new("Circle")

local TargTracerLine = Drawing.new("Line")

local SelfDotCircle = Drawing.new("Circle")
local CamFovCircle = Drawing.new("Circle")

local TargetPlrStats = Instance.new("ScreenGui")

local Picture = Instance.new("ImageLabel")
local NameOfTarget = Instance.new("TextLabel")

local UIGradient1 = Instance.new("UIGradient")
local UIGradient2 = Instance.new("UIGradient")
local UIGradient3 = Instance.new("UIGradient")
local UIGradient4 = Instance.new("UIGradient")

local TargDotParent = Instance.new("Part", workspace)
local TargDotBillboard = Instance.new("BillboardGui", TargDotParent)

local Top = Instance.new("Frame")
local Background = Instance.new("Frame")
local HealthBarBackground = Instance.new("Frame")
local HealthBar = Instance.new("Frame")
local TargDotFrame = Instance.new("Frame", TargDotBillboard)

local TargDotUiCorner = Instance.new("UICorner", TargDotFrame)
local Highlight = Instance.new("Highlight", game.CoreGui)

local Utilities = {
	NoJumpCooldown = false, 
	AntiStomp = false, 
	NoSlowdown = false
}

local TargetAimbot = {
	Enabled = true, 
	Keybind = nil, 

	Prediction = .173, 
	Resolver = true, 

	JumpOffset = 0.09, 
	RealJumpOffset = 0.09,

	HitParts = {"HumanoidRootPart"}, 
	RealHitPart = nil, 

	MousePosType = "UpdateMousePos", -- "UpdateMousePos", "GetMousePos", "MousePos"
	Notifications = false, 

	LookAt = true, 
	ViewAt = false, 

	Dot = true, 
	Tracer = false, 

	DotOnCursor = false, 
	Highlight = false, 
	Stats = false, 

	UseFov = false
}

local CameraAimbot = {
	Enabled = false, 
	Keybind = nil, 

	Prediction = nil, 
	Resolver = false, 

	HitPart = "HumanoidRootPart", 

	Notifications = false, 

	JumpOffset = 0, 
	RealJumpOffset = nil, 

	Smoothness = false, 
	Smoothing = nil, 

	UseFov = false
}

local Movement = {
	SpeedEnabled = false, 
	SpeedAmount = 1, 

	AutoJump = false, 

	StrafeEnabled = false, 
	StrafeSpeed = 1, 
	StrafeDistance = 1, 
	StrafeHeight = 1, 

	FlightEnabled = false, 
	FlightSpeed = 1
}

local SelfDot = {
	Enabled = false, 

	RandomAimPart = false, 
	Prediction = 1, 
	AimPart = "HumanoidRootPart", 
	OldAimPart = nil
}

local AntiLock = {
	Enabled = false, 
	Mode = "Custom", -- "Custom", "Prediction Changer", "Prediction Disabler", "Up", "Down", "Prediction Tripler", "Prediction Reverser", "LookVector", "AirOrthodox", "Prediction Multiplier", "Spinbot Desync"

	CustomX = 10000, 
	CustomY = 10000, 
	CustomZ = 10000, 

	LookVecAmt = 500, 
	PredChangeAmt = 5, 

	DesyncVel = Vector3.new(9e9, 9e9, 9e9), 
	DesyncAngles = 0.5
}

-- Functions

function ClosestPlr(UseFov, FovCircle)
	local Distance, Closest = math.huge, nil

	for i, v in pairs(game.Players:GetPlayers()) do
		if v ~= Plr then
			local Pos = workspace.CurrentCamera:WorldToViewportPoint(v.Character.PrimaryPart.Position)
			local Magnitude = (Vector2.new(Pos.X, Pos.Y) - Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)).Magnitude

			if UseFov then
				if Magnitude < Distance and Magnitude < FovCircle.Radius then
					Closest = v
					Distance = Magnitude
				end
			else
				if Magnitude < Distance then
					Closest = v
					Distance = Magnitude
				end
			end
		end
	end

	return Closest
end

--Stuff

game.CorePackages.Packages:Destroy()

getrawmetatable = getrawmetatable
setreadonly = setreadonly
newcclosure = newcclosure
Drawing = Drawing
Actyrn7104 = Actyrn7104
getnamecallmethod = getnamecallmethod
hookmetamethod = hookmetamethod
getcallingscript = getcallingscript
library = library

--[[
syn = syn
getgenv = getgenv
request = request
http_request = http_request
isfolder = isfolder
makefolder = makefolder
ConfigName = ConfigName
listfiles = listfiles
writefile = writefile
readfile = readfile
isfile = isfile
delfile = delfile
--]]

library:CheckErrors(true, true, Plr, __, Actyrn7104) -- If you remove there's a chance script wont work, DON'T REMOVE !!

local Actyrn_7104 = library:CreateWindow("Azure Modded | Actyrn#7104 | .gg/wDngb2mv4H", Vector2.new(492, 592), Enum.KeyCode.RightShift)

-- Tabs --

local MainTab = Actyrn_7104:CreateTab("Main")
local MiscTab = Actyrn_7104:CreateTab("Misc")

-- MAIN --

local UtilitiesSec = MainTab:CreateSector("Utilities", "right")
local TargetAimbotSec = MainTab:CreateSector("Target Aimbot", "left") 
local CameraAimbotSec = MainTab:CreateSector("Camera Aimbot", "right")

-- MISC --

local MovementSec = MiscTab:CreateSector("Movement", "left")
local SelfDotSec = MiscTab:CreateSector("Self Dot", "left")
local AntiLockSec = MiscTab:CreateSector("Anti Lock", "right")

-- Toggles

-- MAIN --

-- Utilities

local NoJumpCdToggle = UtilitiesSec:AddToggle("No Jump Cooldown", false, function(x)
	Utilities.NoJumpCooldown = x
end)

UtilitiesSec:AddToggle("Anti Stomp", false, function(x)
	Utilities.AntiStomp = x
end)

UtilitiesSec:AddToggle("No Slowdown", false, function(x)
	Utilities.NoSlowdown = x
end)

-- Target Aimbot

TargetAimbotSec:AddToggle("Enabled", false, function(x)
	TargetAimbot.Enabled = x
end)

TargetAimbotSec:AddKeybind("Keybind", nil, function(x)
	TargetAimbot.Keybind = x
end)

TargetAimbotSec:AddTextbox("Prediction", nil, function(x)
	TargetAimbot.Prediction = x
end)

local TargResolverTog = TargetAimbotSec:AddToggle("Antilock Resolver", false, function(x)
	TargetAimbot.Resolver = x
end)

TargResolverTog:AddKeybind()

TargetAimbotSec:AddSlider("Jump Offset", -3, 0, 3, 100, function(x)
	TargetAimbot.JumpOffset = x
	TargetAimbot.RealJumpOffset = x
end)

TargetAimbotSec:AddDropdown("Hit-Part(s)", {
	"Head", 
	"UpperTorso", 
	"LowerTorso", 
	"HumanoidRootPart", 
	"RightLowerArm", 
	"LeftLowerArm", 
	"RightUpperArm", 
	"LeftUpperArm", 
	"RightUpperLeg", 
	"LeftUpperLeg", 
	"RightLowerLeg", 
	"LeftLowerLeg"
}, {"HumanoidRootPart"}, true, function(x)
	TargetAimbot.HitParts = x
end)

TargetAimbotSec:AddDropdown("MousePos Type", {
	"UpdateMousePos", 
	"GetMousePos", 
	"MousePos"
}, "UpdateMousePos", false, function(x)
	TargetAimbot.MousePosType = x
end)

TargetAimbotSec:AddToggle("Notifications", false, function(x)
	TargetAimbot.Notifications = x
end)

TargetAimbotSec:AddToggle("Look At", false, function(x)
	TargetAimbot.LookAt = x
end)

local ViewAtTog = TargetAimbotSec:AddToggle("View At", false, function(x)
	TargetAimbot.ViewAt = x
end)

ViewAtTog:AddKeybind()

local TargDotTog = TargetAimbotSec:AddToggle("Dot", false, function(x)
	TargetAimbot.Dot = x
end)

TargDotTog:AddColorpicker(Color3.fromRGB(170, 120, 210), function(x)
	TargCursorDot.Color = x
	TargDotFrame.BackgroundColor3 = x
end)

local TargTracerTog = TargetAimbotSec:AddToggle("Tracer", false, function(x)
	TargetAimbot.Tracer = x
end)

TargTracerTog:AddColorpicker(Color3.fromRGB(170, 120, 210), function(x)
	TargTracerLine.Color = x
end)

TargetAimbotSec:AddToggle("Dot on Cursor", false, function(x)
	TargetAimbot.DotOnCursor = x
end)

local HighlightTog = TargetAimbotSec:AddToggle("Highlight", false, function(x)
	TargetAimbot.Highlight = x
end)

HighlightTog:AddColorpicker(Color3.fromRGB(170, 120, 210), function(x)
	Highlight.FillColor = x
end)

HighlightTog:AddColorpicker(Color3.fromRGB(90, 65, 110), function(x)
	Highlight.OutlineColor = x
end)

TargetAimbotSec:AddToggle("Stats", false, function(x)
	TargetAimbot.Stats = x
end)

TargetAimbotSec:AddToggle("Use FOV", false, function(x)
	TargetAimbot.UseFov = x
end)

local TargFovTog = TargetAimbotSec:AddToggle("FOV Visible", false, function(x)
	TargFovCircle.Visible = x
end)

TargFovTog:AddColorpicker(Color3.fromRGB(80, 15, 180), function(x)
	TargFovCircle.Color = x
end)

TargetAimbotSec:AddSlider("FOV Size", 5, 80, 500, 1, function(x)
	TargFovCircle.Radius = x * 2
end)

-- Camera Aimbot

CameraAimbotSec:AddToggle("Enabled", false, function(x)
	CameraAimbot.Enabled = x
end)

CameraAimbotSec:AddKeybind("Keybind", nil, function(x)
	CameraAimbot.Keybind = x
end)

CameraAimbotSec:AddTextbox("Prediction", nil, function(x)
	CameraAimbot.Prediction = x
end)

local CamResolverTog = CameraAimbotSec:AddToggle("Antilock Resolver", false, function(x)
	CameraAimbot.Resolver = x
end)

CamResolverTog:AddKeybind()

CameraAimbotSec:AddDropdown("Hit-Part", {
	"Head",
	"HumanoidRootPart",
	"UpperTorso",
	"LowerTorso"
}, "HumanoidRootPart", false, function(x)
	CameraAimbot.HitPart = x
end)

CameraAimbotSec:AddToggle("Notifications", false, function(x)
	CameraAimbot.Notifications = x
end)

CameraAimbotSec:AddSlider("Jump Offset", -3, 0, 3, 100, function(x)
	CameraAimbot.JumpOffset = x
	CameraAimbot.RealJumpOffset = x
end)

CameraAimbotSec:AddToggle("Smoothness", false, function(x)
	CameraAimbot.Smoothness = x
end)

CameraAimbotSec:AddTextbox("Smoothing", nil, function(x)
	CameraAimbot.Smoothing = x
end)

CameraAimbotSec:AddToggle("Use FOV", false, function(x)
	CameraAimbot.UseFov = x
end)

local CamFovTog = CameraAimbotSec:AddToggle("FOV Visible", false, function(x)
	CamFovCircle.Visible = x
end)

CamFovTog:AddColorpicker(Color3.fromRGB(80, 15, 180), function(x)
	CamFovCircle.Color = x
end)

CameraAimbotSec:AddSlider("FOV Size", 5, 80, 500, 1, function(x)
	CamFovCircle.Radius = x * 2
end)

-- MISC --

-- Movement

local SpeedTog = MovementSec:AddToggle("Speed", false, function(x)
	Movement.SpeedEnabled = x
end)

SpeedTog:AddKeybind()

MovementSec:AddSlider("Speed Amount", 1, 1, 5000, 1, function(x)
	Movement.SpeedAmount = x / 1000
end)

MovementSec:AddToggle("Auto Jump", false, function(x)
	Movement.AutoJump = x
end)

local StrafeTog = MovementSec:AddToggle("Target Strafe", false, function(x)
	Movement.StrafeEnabled = x
end)

StrafeTog:AddKeybind()

MovementSec:AddSlider("Speed", 0.5, 0.5, 10, 2, function(x)
	Movement.StrafeSpeed = x
end)

MovementSec:AddSlider("Distance", 1, 1, 20, 2, function(x)
	Movement.StrafeDistance = x
end)

MovementSec:AddSlider("Height", 1, 1, 20, 2, function(x)
	Movement.StrafeHeight = x
end)

local FlightTog = MovementSec:AddToggle("Flight", false, function(x)
	Movement.FlightEnabled = x
end)

FlightTog:AddKeybind()

MovementSec:AddSlider("Speed", 1, 1, 5000, 1, function(x)
	Movement.FlightSpeed = x / 20
end)

-- Self Dot

local SelfDotTog = SelfDotSec:AddToggle("Enabled", false, function(x)
	SelfDot.Enabled = x
end)

SelfDotTog:AddColorpicker(Color3.fromRGB(170, 120, 210), function(x)
	SelfDotCircle.Color = x
end)

SelfDotSec:AddToggle("Random Aim-Part", false, function(x)
	SelfDot.RandomAimPart = x
end)

SelfDotSec:AddSlider("Prediction", 1, 1, 5, 2, function(x)
	SelfDot.Prediction = x / 20
end)

SelfDotSec:AddDropdown("Aim-Part", {
	"Head",
	"HumanoidRootPart",
	"UpperTorso",
	"LowerTorso"
}, "HumanoidRootPart", false, function(x)
	SelfDot.AimPart = x
	SelfDot.OldAimPart = x
end)

-- Anti Lock

local AntiTog = AntiLockSec:AddToggle("Enabled", false, function(x)
	AntiLock.Enabled = x
end)

AntiTog:AddKeybind()

AntiLockSec:AddDropdown("Mode", {
	"Custom", 
	"Prediction Changer", 
	"Prediction Disabler", 
	"Up", "Down", 
	"Prediction Tripler", 
	"Prediction Reverser", 
	"LookVector", 
	"AirOrthodox", 
	"Prediction Multiplier", 
	"Spinbot Desync"
}, "Custom", false, function(x)
	AntiLock.Mode = x
end)

AntiLockSec:AddLabel("Custom")

AntiLockSec:AddSlider("Custom X", -10000, 10000, 10000, 1, function(x)
	AntiLock.CustomX = x
end)

AntiLockSec:AddSlider("Custom Y", -10000, 10000, 10000, 1, function(x)
	AntiLock.CustomY = x
end)

AntiLockSec:AddSlider("Custom Z", -10000, 10000, 10000, 1, function(x)
	AntiLock.CustomZ = x
end)

AntiLockSec:AddLabel("LookVector")

AntiLockSec:AddSlider("LookVector Amount", -1000, 500, 1000, 1, function(x)
	AntiLock.LookVecAmt = x
end)

AntiLockSec:AddLabel("Prediction Changer")

AntiLockSec:AddSlider("Prediction Amount", -20, 5, 20, 1, function(x)
	AntiLock.PredChangeAmt = x
end)

AntiLockSec:AddLabel("Spinbot Desync")

AntiLockSec:AddDropdown("Desync Velocity", {
	"Default",
	"Sky",
	"Underground"
}, "Default", false, function(x)
	if x == "Default" then
		AntiLock.DesyncVel = Vector3.new(9e9, 9e9, 9e9)
	elseif x == "Sky" then
		AntiLock.DesyncVel = Vector3.new(15, 9e9, 15)
	elseif x == "Underground" then
		AntiLock.DesyncVel = Vector3.new(15, -9e9, 15)
	end
end)

AntiLockSec:AddSlider("Desync Angles", -50, 0.5, 50, 2, function(x)
	AntiLock.DesyncAngles = x
end)

-- Code

spawn(function()
	TargetPlrStats.Name = "Actyrn#7104"
	TargetPlrStats.Parent = game.CoreGui
	TargetPlrStats.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	Background.Name = "Actyrn#7104"
	Background.Parent = TargetPlrStats
	Background.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Background.BorderSizePixel = 0
	Background.Position = UDim2.new(0.388957828, 0, 0.700122297, 0)
	Background.Size = UDim2.new(0, 358, 0, 71)
	Background.Visible = false

	Picture.Name = "Actyrn#7104"
	Picture.Parent = Background
	Picture.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Picture.BorderSizePixel = 0
	Picture.Position = UDim2.new(0.0279329624, 0, 0.0704225376, 0)
	Picture.Size = UDim2.new(0, 59, 0, 59)
	Picture.Transparency = 1
	Picture.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"

	Top.Name = "Actyrn#7104"
	Top.Parent = Background
	Top.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Top.BorderSizePixel = 0
	Top.Position = UDim2.new(0, 0, -0.101449274, 0)
	Top.Size = UDim2.new(0, 358, 0, 7)

	UIGradient1.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(185, 160, 230)), ColorSequenceKeypoint.new(1, Color3.fromRGB(102, 88, 156))}
	UIGradient1.Rotation = 90
	UIGradient1.Parent = Top

	UIGradient2.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 50, 50)), ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))}
	UIGradient2.Rotation = 90
	UIGradient2.Parent = Background

	UIGradient3.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(60, 60, 60)), ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 30, 30))}
	UIGradient3.Rotation = 90
	UIGradient3.Parent = HealthBarBackground

	UIGradient4.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(185, 160, 230)), ColorSequenceKeypoint.new(1, Color3.fromRGB(102, 88, 156))}
	UIGradient4.Rotation = 90
	UIGradient4.Parent = HealthBar

	HealthBarBackground.Name = "Actyrn#7104"
	HealthBarBackground.Parent = Background
	HealthBarBackground.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	HealthBarBackground.BorderSizePixel = 0
	HealthBarBackground.Position = UDim2.new(0.215083793, 0, 0.348234326, 0)
	HealthBarBackground.Size = UDim2.new(0, 270, 0, 19)
	HealthBarBackground.Transparency = 1

	HealthBar.Name = "Actyrn#7104"
	HealthBar.Parent = HealthBarBackground
	HealthBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	HealthBar.BorderSizePixel = 0
	HealthBar.Position = UDim2.new(-0.00336122862, 0, 0.164894029, 0)
	HealthBar.Size = UDim2.new(0, 130, 0, 19)

	NameOfTarget.Name = "Actyrn#7104"
	NameOfTarget.Parent = Background
	NameOfTarget.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	NameOfTarget.BackgroundTransparency = 1
	NameOfTarget.Position = UDim2.new(0.220670387, 0, 0.0704225376, 0)
	NameOfTarget.Size = UDim2.new(0, 268, 0, 19)
	NameOfTarget.Font = Enum.Font.Code
	NameOfTarget.TextColor3 = Color3.fromRGB(255, 255, 255)
	NameOfTarget.TextScaled = true
	NameOfTarget.TextSize = 14
	NameOfTarget.TextStrokeTransparency = 0
	NameOfTarget.TextWrapped = true

	SelfDotCircle.Filled = true
	SelfDotCircle.Thickness = 1
	SelfDotCircle.Transparency = 1
	SelfDotCircle.Radius = 7

	TargCursorDot.Filled = true
	TargCursorDot.Thickness = 2
	TargCursorDot.Radius = 7

	TargDotBillboard.Name = "Actyrn#7104"
	TargDotBillboard.Adornee = TargDotParent
	TargDotBillboard.Size = UDim2.new(0.6, 0, 0.6, 0)
	TargDotBillboard.AlwaysOnTop = true

	TargDotFrame.Size = UDim2.new(1, 0, 1, 0)
	TargDotFrame.BackgroundTransparency = 0

	TargDotUiCorner.CornerRadius = UDim.new(50, 50)

	TargDotParent.CanCollide = false
	TargDotParent.Anchored = true
	TargDotParent.Transparency = 1

	TargFovCircle.Filled = false
	TargFovCircle.Thickness = 1
	TargFovCircle.Transparency = 1

	CamFovCircle.Filled = false
	CamFovCircle.Thickness = 1
	CamFovCircle.Transparency = 1

	TargTracerLine.Thickness = 2
end)

-- Heartbeat Functions

spawn(function()
	RunService.Heartbeat:Connect(function() 
		local Pos, OnScreen

		if TargetAimbot.Resolver then
			Pos, OnScreen = workspace.CurrentCamera:WorldToViewportPoint(TargetPlr.Character[TargetAimbot.RealHitPart].Position + (TargetPlr.Character.Humanoid.MoveDirection * TargetAimbot.Prediction * TargetPlr.Character.Humanoid.WalkSpeed or 16))
		else
			Pos, OnScreen = workspace.CurrentCamera:WorldToViewportPoint(TargetPlr.Character[TargetAimbot.RealHitPart].Position + (TargetPlr.Character[TargetAimbot.RealHitPart].Velocity * TargetAimbot.Prediction))
		end

		if TargetAimbot.Enabled and TargBindEnabled and TargetAimbot.Tracer and OnScreen then
			TargTracerLine.Visible = true
			TargTracerLine.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
			TargTracerLine.To = Vector2.new(Pos.X, Pos.Y)
		else
			TargTracerLine.Visible = false
		end
	end)
end)

spawn(function()
	RunService.Heartbeat:Connect(function()
		local Pos, OnScreen = workspace.CurrentCamera:WorldToViewportPoint(Plr.Character[SelfDot.AimPart].Position + (Plr.Character[SelfDot.AimPart].AssemblyLinearVelocity * SelfDot.Prediction))

		if SelfDot.Enabled and OnScreen then
			SelfDotCircle.Visible = true
			SelfDotCircle.Position = Vector2.new(Pos.X, Pos.Y)
		else
			SelfDotCircle.Visible = false
		end
	end)
end)

spawn(function()
	RunService.Heartbeat:Connect(function()
		if TargetAimbot.Enabled and TargBindEnabled and TargetAimbot.Stats then
			Background.Visible = true
			NameOfTarget.Text = tostring(TargetPlr.Character.Humanoid.DisplayName).." ["..tostring(TargetPlr.Name).."]"
			Picture.Image = "rbxthumb://type=AvatarHeadShot&id=" ..TargetPlr.UserId.. "&w=420&h=420"
			HealthBar:TweenSize(UDim2.new(TargetPlr.Character.Humanoid.Health / TargetPlr.Character.Humanoid.MaxHealth, 0, 1, 0), "In", "Linear", 0.25)
		else
			Background.Visible = false
		end
	end)
end)

spawn(function()
	RunService.Heartbeat:Connect(function()
		if Movement.SpeedEnabled then
			Plr.Character.HumanoidRootPart.CFrame = Plr.Character.HumanoidRootPart.CFrame + Plr.Character.Humanoid.MoveDirection * Movement.SpeedAmount
		end
	end)
end)

spawn(function()
	RunService.Heartbeat:Connect(function()
		if TargetAimbot.Enabled and TargBindEnabled and Movement.StrafeEnabled then
			StrafeSpeed = StrafeSpeed + Movement.StrafeSpeed

			Plr.Character.HumanoidRootPart.CFrame = TargetPlr.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(StrafeSpeed), 0) * CFrame.new(0, Movement.StrafeHeight, Movement.StrafeDistance)
		end
	end)
end)

spawn(function()
	RunService.Heartbeat:Connect(function()
		local Char = Plr.Character
		local Hrp = Char.HumanoidRootPart

		if AntiLock.Enabled and Char and Char.Parent and Hrp and Hrp.Parent then
			local Vel, AlVel = Hrp.Velocity, Hrp.AssemblyLinearVelocity

			if AntiLock.Mode == "Custom" then
				Hrp.Velocity = Vector3.new(AntiLock.CustomX, AntiLock.CustomY, AntiLock.CustomZ)
				RunService.RenderStepped:Wait()
				Hrp.Velocity = Vel

			elseif AntiLock.Mode == "Prediction Changer" then
				Hrp.Velocity = Vel * AntiLock.PredChangeAmt
				RunService.RenderStepped:Wait()
				Hrp.Velocity = Vel

			elseif AntiLock.Mode == "Prediction Disabler" then
				Hrp.Velocity = Vel * 0
				RunService.RenderStepped:Wait()
				Hrp.Velocity = Vel

			elseif AntiLock.Mode == "Up" then
				Hrp.Velocity = Vector3.new(0, 9e9, 0)
				RunService.RenderStepped:Wait()
				Hrp.Velocity = Vel

			elseif AntiLock.Mode == "Down" then
				Hrp.Velocity = Vector3.new(0, -9e9, 0)
				RunService.RenderStepped:Wait()
				Hrp.Velocity = Vel

			elseif AntiLock.Mode == "Prediction Tripler" then
				Hrp.Velocity = Vel * 3
				RunService.RenderStepped:Wait()
				Hrp.Velocity = Vel

			elseif AntiLock.Mode == "Prediction Reverser" then
				Hrp.Velocity = Vel * -1
				RunService.RenderStepped:Wait()
				Hrp.Velocity = Vel

			elseif AntiLock.Mode == "LookVector" then
				Hrp.Velocity = Hrp.CFrame.lookVector * AntiLock.LookVecAmt
				RunService.RenderStepped:Wait()
				Hrp.Velocity = Vel

			elseif AntiLock.Mode == "AirOrthodox" then
				Hrp.Velocity = Vector3.new(77, 77, 77)
				RunService.RenderStepped:Wait()
				Hrp.Velocity = Vel

			elseif AntiLock.Mode == "Prediction Multiplier" then
				Hrp.Velocity = Vel * 7
				RunService.RenderStepped:Wait()
				Hrp.Velocity = Vel

			elseif AntiLock.Mode == "Spinbot Desync" then
				Hrp.AssemblyLinearVelocity = AntiLock.DesyncVel
				Hrp.CFrame = Hrp.CFrame * CFrame.Angles(0, math.rad(AntiLock.DesyncAngles), 0)
				RunService.RenderStepped:Wait()
				Hrp.AssemblyLinearVelocity = AlVel
			end
		end
	end)
end)

spawn(function()
	RunService.Heartbeat:Connect(function()
		if Movement.AutoJump and Plr.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall and Plr.Character.Humanoid.MoveDirection.Magnitude > 0 then
			Plr.Character.Humanoid:ChangeState("Jumping")
			NoJumpCdToggle:Set(true)
		end
	end)
end)

spawn(function()
	RunService.Heartbeat:Connect(function()
		Plr.Character.Humanoid.UseJumpPower = not Utilities.NoJumpCooldown
	end)
end)

spawn(function()
	RunService.Heartbeat:Connect(function()
		if Utilities.AntiStomp and Plr.Character.Humanoid.Health <= 5 then
			task.wait()
			Plr.Character:Destroy()
		end
	end)
end)

spawn(function()
	RunService.Heartbeat:Connect(function()
		if Utilities.NoSlowdown then
			local SlowdownEffects = Plr.Character.BodyEffects.Movement:FindFirstChild("NoJumping") or Plr.Character.BodyEffects.Movement:FindFirstChild("ReduceWalk") or Plr.Character.BodyEffects.Movement:FindFirstChild("NoWalkSpeed")

			if SlowdownEffects then
				SlowdownEffects:Destroy()
			end

			if Plr.Character.BodyEffects.Reload.Value then
				Plr.Character.BodyEffects.Reload.Value = false
			end
		end
	end)
end)

-- Stepped Functions

spawn(function()
	RunService.Stepped:Connect(function()
		if SelfDot.RandomAimPart then
			local RandomParts = {
				"Head",
				"UpperTorso",
				"LowerTorso",
				"HumanoidRootPart",
				"RightUpperLeg",
				"LeftUpperLeg",
				"RightUpperArm",
				"LeftUpperArm"
			}
			SelfDot.AimPart = RandomParts[math.random(1, #RandomParts)]
			wait(0.6)
		else
			SelfDot.AimPart = SelfDot.OldAimPart
		end
	end)
end)

spawn(function()
	RunService.Stepped:Connect(function()
		pcall(function()
			if Movement.FlightEnabled then
				local FlyVelocity = Vector3.new(0, 0, 0)

				if not UserInputService:GetFocusedTextBox() then

					if UserInputService:IsKeyDown(Enum.KeyCode.W) then
						FlyVelocity = FlyVelocity + (workspace.CurrentCamera.CoordinateFrame.lookVector * Movement.FlightSpeed)
					end

					if UserInputService:IsKeyDown(Enum.KeyCode.A) then
						FlyVelocity = FlyVelocity + (workspace.CurrentCamera.CoordinateFrame.rightVector * -Movement.FlightSpeed)
					end

					if UserInputService:IsKeyDown(Enum.KeyCode.S) then
						FlyVelocity = FlyVelocity + (workspace.CurrentCamera.CoordinateFrame.lookVector * -Movement.FlightSpeed)
					end

					if UserInputService:IsKeyDown(Enum.KeyCode.D) then
						FlyVelocity = FlyVelocity + (workspace.CurrentCamera.CoordinateFrame.rightVector * Movement.FlightSpeed)
					end
				end

				Plr.Character.HumanoidRootPart.Velocity = FlyVelocity
				Plr.Character.Humanoid:ChangeState("Freefall")
			else
				Plr.Character.Humanoid:ChangeState("Landing")
			end
		end)
	end)
end)

spawn(function()
	RunService.Stepped:Connect(function()
		if TargetPlr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
			TargetAimbot.RealJumpOffset = TargetAimbot.JumpOffset
		else
			TargetAimbot.RealJumpOffset = 0
		end
	end)
end)

spawn(function()
	RunService.Stepped:Connect(function()
		if CamlockPlr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
			CameraAimbot.RealJumpOffset = CameraAimbot.JumpOffset
		else
			CameraAimbot.RealJumpOffset = 0
		end
	end)
end)

spawn(function()
	RunService.Stepped:Connect(function()
		if TargetAimbot.Enabled and TargBindEnabled and TargetAimbot.ViewAt then
			workspace.CurrentCamera.CameraSubject = TargetPlr.Character.Humanoid
		else
			workspace.CurrentCamera.CameraSubject = Plr.Character.Humanoid
		end
	end)
end)

spawn(function()
	RunService.Stepped:Connect(function()
		if TargetAimbot.Enabled and TargBindEnabled and TargetAimbot.Highlight then
			Highlight.Parent = TargetPlr.Character
		else
			Highlight.Parent = game.CoreGui
		end
	end)
end)

spawn(function()
	RunService.Stepped:Connect(function()
		if TargetAimbot.Enabled and TargBindEnabled and TargetAimbot.Dot  then
			TargCursorDot.Visible = false

			if TargetAimbot.Resolver then
				TargDotParent.CFrame = CFrame.new(TargetPlr.Character[TargetAimbot.RealHitPart].Position + (TargetPlr.Character.Humanoid.MoveDirection * TargetAimbot.Prediction * (TargetPlr.Character.Humanoid.WalkSpeed or 16)))
			else
				TargDotParent.CFrame = CFrame.new(TargetPlr.Character[TargetAimbot.RealHitPart].Position + Vector3.new(0, TargetAimbot.RealJumpOffset, 0) + (TargetPlr.Character[TargetAimbot.RealHitPart].Velocity * TargetAimbot.Prediction))
			end
		else
			TargDotParent.CFrame = CFrame.new(0, 9999, 0)

			if TargetAimbot.DotOnCursor and not TargBindEnabled then
				TargCursorDot.Visible = true
				TargCursorDot.Position = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
			else
				TargCursorDot.Visible = false
			end
		end
	end)
end)

spawn(function()
	RunService.Stepped:Connect(function()
		TargetAimbot.RealHitPart = TargetAimbot.HitParts[math.random(1, #TargetAimbot.HitParts)]
		wait(0.6)
	end)
end)

-- RenderStepped Functions

spawn(function()
	RunService.RenderStepped:Connect(function()
		if CameraAimbot.Enabled and CamBindEnabled then
			if CameraAimbot.Resolver then
				if CameraAimbot.Smoothness then
					workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(CFrame.new(workspace.CurrentCamera.CFrame.p, 
						CamlockPlr.Character[CameraAimbot.HitPart].Position +
							CamlockPlr.Character.Humanoid.MoveDirection * CameraAimbot.Prediction * (CamlockPlr.Character.Humanoid.WalkSpeed or 16)), 
						CameraAimbot.Smoothing, Enum.EasingStyle["Linear"], Enum.EasingDirection["InOut"])
				else
					workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.p, 
						CamlockPlr.Character[CameraAimbot.HitPart].Position +
							CamlockPlr.Character.Humanoid.MoveDirection * CameraAimbot.Prediction * (CamlockPlr.Character.Humanoid.WalkSpeed or 16))
				end
			else
				if CameraAimbot.Smoothness then
					workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(CFrame.new(workspace.CurrentCamera.CFrame.p, 
						CamlockPlr.Character[CameraAimbot.HitPart].Position + Vector3.new(0, CameraAimbot.RealJumpOffset, 0) +
							CamlockPlr.Character[CameraAimbot.HitPart].Velocity * CameraAimbot.Prediction), 
						CameraAimbot.Smoothing, Enum.EasingStyle["Linear"], Enum.EasingDirection["InOut"])
				else
					workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.p, 
						CamlockPlr.Character[CameraAimbot.HitPart].Position + Vector3.new(0, CameraAimbot.RealJumpOffset, 0) +
							CamlockPlr.Character[CameraAimbot.HitPart].Velocity * CameraAimbot.Prediction)
				end
			end
		end
	end)
end)

spawn(function()
	RunService.RenderStepped:Connect(function()
		TargFovCircle.Position = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
		CamFovCircle.Position = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
	end)
end)

spawn(function()
	RunService.RenderStepped:Connect(function()
		if TargetAimbot.Enabled and TargBindEnabled and TargetAimbot.LookAt then
			Plr.Character.HumanoidRootPart.CFrame = CFrame.new(Plr.Character.HumanoidRootPart.CFrame.Position, Vector3.new(TargetPlr.Character.HumanoidRootPart.CFrame.X, Plr.Character.HumanoidRootPart.CFrame.Position.Y, TargetPlr.Character.HumanoidRootPart.CFrame.Z))
			Plr.Character.Humanoid.AutoRotate = false
		else
			Plr.Character.Humanoid.AutoRotate = true
		end
	end)
end)

-- InputBegan Functions

spawn(function()
	UserInputService.InputBegan:Connect(function(Key)
		if Key.KeyCode == TargetAimbot.Keybind and TargetAimbot.Enabled and not UserInputService:GetFocusedTextBox() then
			TargBindEnabled = not TargBindEnabled

			if TargBindEnabled then
				TargetPlr = ClosestPlr(TargetAimbot.UseFov, TargFovCircle)

				if TargetAimbot.Notifications then
					NotifLib.Notify({
						Title = "Azure Modded [Actyrn#7104]", 
						Description = "Targeting: " ..tostring(TargetPlr.Character.Humanoid.DisplayName), 
						Duration = 3
					})
				end
			else
				if TargetAimbot.Notifications then
					NotifLib.Notify({
						Title = "Azure Modded [Actyrn#7104]", 
						Description = "Untargeting: " ..tostring(TargetPlr.Character.Humanoid.DisplayName), 
						Duration = 3
					})
				end
			end
		end
	end)
end)

spawn(function()
	UserInputService.InputBegan:Connect(function(Key)
		if Key.KeyCode == CameraAimbot.Keybind and CameraAimbot.Enabled and not UserInputService:GetFocusedTextBox() then
			CamBindEnabled = not CamBindEnabled

			if CamBindEnabled then
				CamlockPlr = ClosestPlr(CameraAimbot.UseFov, CamFovCircle)

				if CameraAimbot.Notifications then
					NotifLib.Notify({
						Title = "Azure Modded [Actyrn#7104]", 
						Description = "Targeting: " ..tostring(CamlockPlr.Character.Humanoid.DisplayName), 
						Duration = 3
					})
				end
			else
				if CameraAimbot.Notifications then
					NotifLib.Notify({
						Title = "Azure Modded [Actyrn#7104]", 
						Description = "Untargeting: " ..tostring(CamlockPlr.Character.Humanoid.DisplayName), 
						Duration = 3
					})
				end
			end
		end
	end)
end)

-- Getrawmetatable functions

assert(getrawmetatable)
setreadonly(getrawmetatable(game), false)

getrawmetatable(game).__namecall = newcclosure(function(Self, ...)
	local Args = {...}

	if tostring(Args[1]) == "BreathingHAMON" then
		return
	elseif tostring(Args[1]) == "TeleportDetect" then
		return
	elseif tostring(Args[1]) == "JJARC" then
		return
	elseif tostring(Args[1]) == "TakePoisonDamage" then
		return
	elseif tostring(Args[1]) == "CHECKER_1" then
		return
	elseif tostring(Args[1]) == "CHECKER" then
		return
	elseif tostring(Args[1]) == "GUI_CHECK" then
		return
	elseif tostring(Args[1]) == "OneMoreTime" then
		return
	elseif tostring(Args[1]) == "checkingSPEED" then
		return
	elseif tostring(Args[1]) == "BANREMOTE" then
		return
	elseif tostring(Args[1]) == "PERMAIDBAN" then
		return
	elseif tostring(Args[1]) == "KICKREMOTE" then
		return
	elseif tostring(Args[1]) == "BR_KICKPC" then
		return
	elseif tostring(Args[1]) == "FORCEFIELD" then
		return
	elseif tostring(Args[1]) == "Christmas_Sock" then
		return
	elseif tostring(Args[1]) == "VirusCough" then
		return
	elseif tostring(Args[1]) == "Symbiote" then
		return
	elseif tostring(Args[1]) == "Symbioted" then
		return
	end

	return Old(...)
end)

getrawmetatable(game).__namecall = newcclosure(function(...)
	local Args = {...}

	if TargetAimbot.Enabled and TargBindEnabled and getnamecallmethod() == "FireServer" and Args[2] == TargetAimbot.MousePosType then
		if TargetAimbot.Resolver then
			Args[3] = TargetPlr.Character[TargetAimbot.RealHitPart].Position +
				(TargetPlr.Character.Humanoid.MoveDirection * TargetAimbot.Prediction * (TargetPlr.Character.Humanoid.WalkSpeed or 16))
		else
			Args[3] = TargetPlr.Character[TargetAimbot.RealHitPart].Position +
				Vector3.new(0, TargetAimbot.RealJumpOffset, 0) + (TargetPlr.Character[TargetAimbot.RealHitPart].Velocity * TargetAimbot.Prediction)
		end

		return Old(unpack(Args))
	end

	return Old(...)
end)

--Hookmetamethod functions

NewIndex = hookmetamethod(game, "__newindex", function(Self, Index, Value)
	if tostring(getcallingscript()) == "Framework" and tostring(Self):lower():find("camera") and tostring(Index) == "CFrame" then
		return
	end

	return NewIndex(Self, Index, Value)
end)
